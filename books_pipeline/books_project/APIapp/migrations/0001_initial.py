# Generated by Django 4.2.7 on 2025-06-25 01:09

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Books',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_id', models.IntegerField(blank=True, help_text='Unique book identifier', null=True)),
                ('title', models.CharField(help_text='Book title', max_length=25500)),
                ('author', models.CharField(help_text='Book author(s)', max_length=25500)),
                ('importance', models.CharField(help_text='Importance level or rating', max_length=25500)),
                ('topic', models.CharField(help_text='Book topic or subject', max_length=25500)),
                ('g_books_title', models.CharField(blank=True, help_text='Google Books API title', max_length=25500, null=True)),
                ('g_books_authors', models.JSONField(blank=True, help_text='Google Books API authors list', null=True)),
                ('g_books_publisher', models.CharField(blank=True, help_text='Publisher from Google Books', max_length=25500, null=True)),
                ('g_books_published_year', models.CharField(blank=True, help_text='Publication year from Google Books', max_length=100, null=True)),
                ('g_books_description', models.TextField(blank=True, help_text='Book description from Google Books', null=True)),
                ('g_books_page_count', models.FloatField(blank=True, help_text='Number of pages', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('g_books_categories', models.JSONField(blank=True, help_text='Book categories from Google Books', null=True)),
                ('g_books_average_rating', models.FloatField(blank=True, help_text='Average rating (0-5)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('g_books_ratings_count', models.FloatField(blank=True, help_text='Number of ratings', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('g_books_image_links', models.JSONField(blank=True, help_text='Book cover image links', null=True)),
                ('g_books_language', models.CharField(blank=True, help_text='Book language', max_length=25500, null=True)),
                ('g_books_preview_link', models.CharField(blank=True, help_text='Google Books preview link', max_length=25500, null=True)),
                ('scholar_title', models.CharField(blank=True, help_text='Title from Google Scholar', max_length=25500, null=True)),
                ('scholar_url', models.CharField(blank=True, help_text='Google Scholar URL', max_length=25500, null=True)),
                ('scholar_type', models.CharField(blank=True, help_text='Publication type from Scholar', max_length=25500, null=True)),
                ('scholar_snippet', models.TextField(blank=True, help_text='Text snippet from Scholar', null=True)),
                ('scholar_publication_info_summary', models.CharField(blank=True, help_text='Publication info summary', max_length=25500, null=True)),
                ('scholar_author_names', models.JSONField(blank=True, help_text='Author names from Scholar', null=True)),
                ('scholar_author_links', models.JSONField(blank=True, help_text='Author profile links from Scholar', null=True)),
                ('search_title', models.CharField(blank=True, help_text='Title from Google Search', max_length=25500, null=True)),
                ('search_url', models.CharField(blank=True, help_text='URL from Google Search', max_length=25500, null=True)),
                ('search_snippet', models.TextField(blank=True, help_text='Search result snippet', null=True)),
                ('search_source', models.CharField(blank=True, help_text='Search result source', max_length=25500, null=True)),
                ('filename', models.CharField(help_text='Original PDF filename', max_length=25500)),
                ('public_url', models.CharField(blank=True, help_text='Public URL for the book', max_length=25500, null=True)),
                ('public_authors', models.JSONField(blank=True, help_text='Processed author information', null=True)),
                ('public_title', models.CharField(blank=True, help_text='Processed public title', max_length=25500, null=True)),
                ('embed_id_dict', models.JSONField(blank=True, help_text='Maps chunk_id to text content for embeddings', null=True)),
                ('embed_filename', models.CharField(blank=True, help_text='Reference filename for embeddings', max_length=25500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'db_table': 'books',
                'indexes': [models.Index(fields=['title'], name='books_title_7a737c_idx'), models.Index(fields=['author'], name='books_author_1c43f5_idx'), models.Index(fields=['filename'], name='books_filenam_b93738_idx'), models.Index(fields=['importance'], name='books_importa_bfafbd_idx'), models.Index(fields=['topic'], name='books_topic_7020ea_idx')],
            },
        ),
    ]
